# Run as a less privileged user for security
user www;

# Worker threads
worker_processes    auto;

# Error log file
error_log           /var/log/nginx/error.log;

# PID file
pid                 /var/run/nginx.pid;


# 1 worker -> 1024 connections
events {
    worker_connections      1024;
}


http {
        # Hide NGINX version information
        server_tokens off;

        # TODO: check path /etc/nginx/mime.types
        include             mime.types;
        default_type        application/octet-stream;

        ## Logs
        # Log formatting
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

        # Access log file
        access_log  /var/log/nginx/access.log  main;

        # Tell Nginx not to send out partial frames; this increases throughput
        # since TCP frames are filled up before being sent out.
        tcp_nopush      on;

        # Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
        # collates several smaller packets together into one larger packet, thus saving
        # bandwidth at the cost of a increase to latency.
        #
        # "When downloading a full Web page, TCP_NODELAY can save you up to
        # 0.2 second on every HTTP request, which is nice. When it comes to
        # online gaming or high frequency trading, getting rid of latency
        # is critical even at the price of a relative network saturation."
        # - https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html
        tcp_nodelay     on;

        ## Proxy Options
        # set_real_ip_from 127.0.0.1;
        # real_ip_header X-Forwarded-For;

        ## Use sendfile() syscall to speed up I/O operations and speed up
        ## static file serving.
        sendfile on;

        ## Timeout
        # If a client does not receive anything within the time set in this directive, a connection is closed. 
        keepalive_timeout   60s;
        reset_timedout_connection on;
        client_body_timeout 3m;

        # limit the number of connections per IP
        limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
        # limit the number of requests for this session
        limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;

        ## Gzip
        gzip  on;
        # disable for old browser
        gzip_disable "MSIE [1-6] \.";

        server {
            listen          80;
            listen          [::]:80;
            server_name     localhost;

            limit_conn conn_limit_per_ip 20;
            limit_req zone=req_limit_per_ip burst=20 nodelay;

            return 301 https://$server_name$request_uri;

        }

        server {
            listen          443 ssl;
            listen          [::]:443 ssl;
            server_name     localhost;

            # SSL cert and key
            ssl_certificate /etc/ssl/certs/localhost.crt;
            ssl_certificate_key /etc/ssl/certs/localhost.key;

            # Use SSL following versions
            ssl_protocols TLSv1.2 TLSv1.3;

            # Timeout
            ssl_session_timeout 1d;

            # Root
            location / {
                root   /var/www/;
                index  index.html index.htm;
            }

            # 404 custom page
            error_page  404              /404.html;
            # Use internal to prevent return 404; recursion
            location = /404.html {
                internal;
            }

            # Redirect server error pages to the static page /50x.html
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                    root   html;
            }

            # WordPress
            location /wordpress {
                return 307 https://$server_name:5050;
            }

            # PhpMyAdmin
            location /phpmyadmin {
                proxy_pass https://$server_name:5000;
            }

        }

    # Extra config
    #include /PATHNGINX/conf.d/*.conf;

}
